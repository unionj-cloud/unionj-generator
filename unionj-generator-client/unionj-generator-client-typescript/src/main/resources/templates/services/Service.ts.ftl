/**
* Generated by unionj-generator.
* Don't edit!
*
* @module ${module}
*/
import BizService from "./BizService";
<#if types?has_content>
import type {
<#list types as type>
  ${type},
</#list>
} from "./types"
</#if>

export class ${name} extends BizService{

  constructor(axios: any) {
    super(axios);
  }

<#list routers as router>
  /**
  * ${router.httpMethod?upper_case} ${router.endpoint}
  *
  <#if router.docs??>
    <#list router.docs as doc>
  * ${doc}
    </#list>
  </#if>
  <#if router.reqBody??>
  * @param ${router.reqBody.name} ${router.reqBody.doc!}
  </#if>
  <#if router.allParams??>
    <#list router.allParams as param>
  * @param ${param.name} ${param.doc!}
    </#list>
  </#if>
  * @returns Promise<${(router.respData.type=="Blob")?then("any",router.respData.type)}> ${router.respData.doc!}
  */
  ${router.name}(
  <#if router.reqBody??>
    ${router.reqBody.name}: ${router.reqBody.type},
  </#if>
  <#if router.allParams??>
    params: {
    <#list router.allParams as param>
      ${param.name}<#if !param.required>?</#if>: ${param.type},
    </#list>
    },
  </#if>
  ) :Promise<${(router.respData.type=="Blob")?then("any",router.respData.type)}> {
    let client = this.axios.${router.httpMethod?lower_case}
    if(this.axios.$${router.httpMethod?lower_case}) {
      client = this.axios.$${router.httpMethod?lower_case}
    }
    <#if router.urlSearchParams??>
      const urlSearchParams = new URLSearchParams();
      <#list router.urlSearchParams as urlSearchParam>
        <#if !urlSearchParam.required>params.${urlSearchParam.name} !== undefined &&</#if> urlSearchParams.append('${urlSearchParam.name}', '' + params.${urlSearchParam.name});
      </#list>
    </#if>
    return client(this.addPrefix(`${router.endpoint}`),
        <#if router.reqBody??>
          ${router.reqBody.name},
        <#elseif router.urlSearchParams??>
          urlSearchParams,
        <#elseif router.httpMethod?lower_case == "post" || router.httpMethod?lower_case == "put">
          null,
        </#if>
          {
            <#if router.queryParams??>
            params: {
            <#list router.queryParams as queryParam>
              ${queryParam.name}: params.${queryParam.name},
            </#list>
            },
            </#if>
            <#if router.urlSearchParams??>
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            </#if>
            <#if router.respData.type == "Blob">
            responseType: 'blob',
            </#if>
          }
        )
  }

</#list>
}

export default ${name};

